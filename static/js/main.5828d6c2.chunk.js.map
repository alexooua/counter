{"version":3,"sources":["Components/Counter.module.css","Components/CounterSecond.module.css","Components/Button.jsx","Components/Num.jsx","Components/Input.jsx","Components/Counter.jsx","Components/CounterSecond.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","render","className","s","group","button","disabled","props","onClick","onClickFn","title","React","Component","Num","num","nameNum","Number","maxVal","vals","red","onSet","Input","setScreen","err","type","onChange","setVal","value","onFocus","Counter","state","minVal","saveState","localStorage","setItem","JSON","stringify","restoreState","stateAsString","getItem","parse","setState","setMaxVal","e","currentTarget","setMinVal","incButton","resButton","forMax","forMin","task","row","block","thisNum","this","CounterSecond","onShow","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5828d6c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Counter_task__12W0p\",\"row\":\"Counter_row__2mTKx\",\"setScreen\":\"Counter_setScreen__3mv0L\",\"block\":\"Counter_block__2pF9k\",\"num\":\"Counter_num__1ew64\",\"red\":\"Counter_red__261we\",\"group\":\"Counter_group__3TIyn\",\"button\":\"Counter_button__3gvC4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"CounterSecond_task__3BAT5\",\"row\":\"CounterSecond_row__3P-ms\",\"setScreen\":\"CounterSecond_setScreen__1SrF6\",\"block\":\"CounterSecond_block__3MueH\",\"num\":\"CounterSecond_num__2qvZi\",\"red\":\"CounterSecond_red__1YbmX\",\"group\":\"CounterSecond_group__5h3Rt\",\"button\":\"CounterSecond_button__2sTMb\"};","import React from 'react';\nimport s from \"./Counter.module.css\"\n\n\nclass Button extends React.Component {\n\n    render = () => {\n\n        return (\n\n                    <div className={s.group}>\n\n                        <button className={s.button}\n                                disabled={this.props.disabled}\n                                onClick={this.props.onClickFn}\n                        >{this.props.title}\n                        </button>\n\n                    </div>\n\n        );\n    }\n}\n\n\nexport default Button;\n","import React from 'react';\nimport s from \"./Counter.module.css\"\n\n\nclass Num extends React.Component {\n\n    render = () => {\n\n        return (\n\n            <div className={\n                s.num + ' ' + (!!(this.props.nameNum === Number(this.props.maxVal)\n                    || this.props.vals) && s.red)}>\n\n                {\n                    (this.props.vals && \"Incorrect value\") ||\n                    (this.props.onSet === false && \"Enter values and press 'Set'\") ||\n                    this.props.nameNum\n                }\n\n            </div>\n\n        );\n    }\n}\n\n\nexport default Num;\n","import React from 'react';\nimport s from \"./Counter.module.css\"\n\n\nclass Input extends React.Component {\n\n\n    render = () => {\n\n\n        return (\n            <div className={s.setScreen }>\n                <span > <em>{this.props.title} value</em></span>\n                <input className= {this.props.err}\n                       type=\"number\"\n                       onChange={this.props.setVal}\n                       value={this.props.value}\n                       onFocus={this.props.setVal}\n                />\n            </div>\n        );\n    }\n}\n\n\nexport default Input;\n","import React from 'react';\nimport s from \"./Counter.module.css\"\nimport Button from \"./Button\";\nimport Num from \"./Num\";\nimport Input from \"./Input\";\n\n\nclass Counter extends React.Component {\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    state = {\n        maxVal: 0,\n        minVal: 0,\n        num: null,\n        onSet: false\n    }\n\n    //сохраняем в базу в браузере\n    saveState = () => {\n        localStorage.setItem('Counter-state', JSON.stringify(this.state))\n    }\n    //востановлениве стейта\n    restoreState = () => {\n        let state = this.state\n        let stateAsString = localStorage.getItem(\"Counter-state\")\n        if (stateAsString) {\n            state = JSON.parse(stateAsString)\n        }\n        this.setState(state)\n    }\n\n    //установка maxVal\n    setMaxVal = (e) => {\n        this.setState(\n            {\n                maxVal: e.currentTarget.value,\n                onSet: false\n            },\n            this.saveState\n        )\n    }\n    //установка minVal\n    setMinVal = (e) => {\n        this.setState(\n            {\n                minVal: e.currentTarget.value,\n                onSet: false\n            },\n            this.saveState\n        )\n    }\n    //кнопка установки\n    setVal = () => {\n        this.setState(\n            {\n                num: this.state.minVal,\n                onSet: true\n            },\n            this.saveState\n        )\n    }\n    //кнопка инкремента\n    incButton = () => {\n        let num = this.state.num\n        num < Number(this.state.maxVal) && num++\n        this.setState({\n                num: num\n            },\n            this.saveState\n        )\n    }\n    //сброс настроек\n    resButton = () => {\n        this.setState({\n                num: this.state.minVal\n            },\n            this.saveState\n        )\n    }\n\n\n    render = () => {\n        let forMax = (Number(this.state.maxVal) < 0 || Number(this.state.maxVal) <= Number(this.state.minVal))\n        let forMin = (Number(this.state.minVal) < 0 || Number(this.state.minVal) >= Number(this.state.maxVal))\n\n        return (\n            <div className={s.task}>\n                <div><h3>Counter</h3></div>\n                <div className={s.row}>\n                    {/*Max Min input*/}\n                    <div className={s.block}>\n                        <Input\n                            err={forMax && s.red}\n                            setVal={this.setMaxVal}\n                            title='Max'\n                            value={this.state.maxVal}\n                        />\n                        <Input\n                            err={forMin && s.red}\n                            setVal={this.setMinVal}\n                            title='Mix'\n                            value={this.state.minVal}\n                        />\n\n                        {/*Button set*/}\n                        <div className={s.group}>\n                            <Button onClickFn={this.setVal}\n                                    thisNum={this.state.num}\n                                    title={'Set'}\n                                    disabled={(forMax || forMin || this.state.onSet === true) && 'disabled'}\n                            />\n                        </div>\n\n                    </div>\n\n                    <div className={s.block}>\n                        {/*Span*/}\n                        <Num nameNum={this.state.num}\n                             maxVal={this.state.maxVal}\n                             minVal={this.state.minVal}\n                             onSet={this.state.onSet}\n                             vals={forMax||forMin}\n                        />\n\n                        {/*2 button*/}\n                        <div className={s.group}>\n                            <Button onClickFn={this.incButton}\n                                    thisNum={this.state.num}\n                                    title={'Inc'}\n                                    disabled={\n                                        (this.state.onSet === false || this.state.num === Number(this.state.maxVal))\n                                        && 'disabled'\n                                    }\n                            />\n                            <Button onClickFn={this.resButton}\n                                    thisNum={this.state.num}\n                                    title={'Res'}\n                                    disabled={(this.state.onSet === false) && 'disabled'}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Counter;\n","import React from 'react';\nimport s from \"./CounterSecond.module.css\"\nimport Button from \"./Button\";\nimport Num from \"./Num\";\nimport Input from \"./Input\";\n\n\nclass CounterSecond extends React.Component {\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    state = {\n        maxVal: 0,\n        minVal: 0,\n        num: null,\n        onSet: false,\n        onShow: false\n    }\n\n    //сохраняем в базу в браузере\n    saveState = () => {\n        localStorage.setItem('Counter-state-two', JSON.stringify(this.state))\n    }\n    //востановлениве стейта\n    restoreState = () => {\n        let state = this.state\n        let stateAsString = localStorage.getItem(\"Counter-state-two\")\n        if (stateAsString) {\n            state = JSON.parse(stateAsString)\n        }\n        this.setState(state)\n    }\n\n    //установка maxVal\n    setMaxVal = (e) => {\n        this.setState(\n            {\n                maxVal: e.currentTarget.value,\n                onSet: false\n            },\n            this.saveState\n        )\n    }\n    //установка minVal\n    setMinVal = (e) => {\n        this.setState(\n            {\n                minVal: e.currentTarget.value,\n                onSet: false\n            },\n            this.saveState\n        )\n    }\n    //кнопка установки\n    setVal = () => {\n        this.setState(\n            {\n                num: this.state.minVal,\n                onSet: true,\n                onShow: false\n            },\n            this.saveState\n        )\n    }\n    //кнопка инкремента\n    incButton = () => {\n\n        let num = this.state.num\n        num < Number(this.state.maxVal) && num++\n        this.setState({\n                num: num\n            },\n            this.saveState\n        )\n    }\n    //сброс настроек\n    resButton = () => {\n        this.setState({\n                num: this.state.minVal\n            },\n            this.saveState\n        )\n    }\n    //переключатель\n    onShow = () => {\n        this.setState({\n                onShow: true\n            },\n            this.saveState\n        )\n\n    }\n\n    render = () => {\n        let forMax = (Number(this.state.maxVal) < 0 || Number(this.state.maxVal) <= Number(this.state.minVal))\n        let forMin = (Number(this.state.minVal) < 0 || Number(this.state.minVal) >= Number(this.state.maxVal))\n\n        return (\n            <div className={s.task}>\n                <div><h3>Counter (Second variant)</h3></div>\n                <div className={s.row}>\n                    {/*Max Min input*/}\n                    {this.state.onShow && <div className={s.block}>\n                        <Input\n                            err={forMax && s.red}\n                            setVal={this.setMaxVal}\n                            title='Max'\n                            value={this.state.maxVal}\n                        />\n                        <Input\n                            err={forMin && s.red}\n                            setVal={this.setMinVal}\n                            title='Mix'\n                            value={this.state.minVal}\n                        />\n\n                        {/*Button set*/}\n                        <div className={s.group}>\n                            <Button onClickFn={this.setVal}\n                                    thisNum={this.state.num}\n                                    title={'Set'}\n                                    disabled={(forMax || forMin || this.state.onSet === true) && 'disabled'}\n                            />\n                        </div>\n\n                    </div>}\n\n                    {!this.state.onShow&&<div className={s.block}>\n                        {/*Span*/}\n                        <Num nameNum={this.state.num}\n                             maxVal={this.state.maxVal}\n                             minVal={this.state.minVal}\n                             onSet={this.state.onSet}\n                             vals={forMax || forMin}\n                        />\n\n                        {/*2 button*/}\n                        <div className={s.group}>\n                            <Button onClickFn={this.incButton}\n                                    thisNum={this.state.num}\n                                    title={'Inc'}\n                                    disabled={\n                                        this.state.onSet === false || this.state.num === Number(this.state.maxVal)\n                                        && 'disabled'\n                                    }\n                            />\n                            <Button onClickFn={this.resButton}\n                                    thisNum={this.state.num}\n                                    title={'Res'}\n                                    disabled={(this.state.onSet === false) && 'disabled'}\n                            />\n                            <Button onClickFn={this.onShow}\n                                    title={'Set'}\n                            />\n                        </div>\n                    </div>}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default CounterSecond;\n","import React from 'react';\nimport Counter from './Components/Counter';\nimport CounterSecond from './Components/CounterSecond';\n\nimport './App.css';\n\n\nfunction App() {\n    return (\n        <div>\n\n            <Counter/>\n            <CounterSecond/>\n\n      </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}