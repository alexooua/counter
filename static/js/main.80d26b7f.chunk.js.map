{"version":3,"sources":["Components/Counter.module.css","Components/Res.jsx","Components/Inc.jsx","Components/Num.jsx","Components/Counter.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Res","render","className","s","group","button","onClick","props","resButton","disabled","nameNum","name","href","React","Component","Inc","incButton","Num","nums","numred","num","Counter","state","setState","task","block","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,MAAQ,uBAAuB,IAAM,qBAAqB,OAAS,wBAAwB,KAAO,sBAAsB,MAAQ,uBAAuB,OAAS,0B,mMCsBhMC,E,4MAjBXC,OAAS,WAEL,OACI,yBAAKC,UAAWC,IAAEC,OAEd,4BAAQF,UAAWC,IAAEE,OAAQC,QAAS,EAAKC,MAAMC,UACzCC,SAA+B,IAArB,EAAKF,MAAMG,QAAY,WAAW,GAC5CC,KAAK,OACLC,KAAK,SAHb,S,YAPEC,IAAMC,WCiBTC,E,4MAfXd,OAAS,WAEL,OAEY,yBAAKC,UAAWC,IAAEC,OAEd,4BAAQF,UAAWC,IAAEE,OAAQC,QAAS,EAAKC,MAAMS,UAAWL,KAAK,OAAOC,KAAK,SAA7E,S,YARNC,IAAMC,WCiBTG,E,4MAbXhB,OAAS,WAEL,OAEY,yBAAKC,UAAWC,IAAEe,MACd,0BAAMhB,UAAgC,IAArB,EAAKK,MAAMG,QAAYP,IAAEgB,OAAOhB,IAAEiB,KAAnD,kCAA+D,EAAKb,MAAMG,QAA1E,O,YAPNG,IAAMC,WCoCTO,E,4MAlCXC,MAAQ,CACJF,IAAK,G,EAETJ,UAAY,WACR,IAAII,EAAM,EAAKE,MAAMF,IACrBA,EAAM,GAAKA,IACX,EAAKG,SAAS,CACVH,IAAKA,K,EAGbZ,UAAY,WACR,EAAKe,SAAS,CACVH,IAAK,K,EAIbnB,OAAS,WAEL,OACI,yBAAKC,UAAWC,IAAEqB,MACd,yBAAKtB,UAAU,SAAQ,wCACvB,yBAAKA,UAAWC,IAAEsB,OACd,kBAAC,EAAD,CAAKf,QAAS,EAAKY,MAAMF,MACzB,yBAAKlB,UAAWC,IAAEC,OACd,kBAAC,EAAD,CAAKY,UAAW,EAAKA,UAAWN,QAAS,EAAKY,MAAMF,MACpD,kBAAC,EAAD,CAAKZ,UAAW,EAAKA,UAAWE,QAAS,EAAKY,MAAMF,U,YA1BtDP,IAAMC,W,MCSbY,MAXf,WACE,OACI,6BAEE,kBAAC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS/B,OACP,kBAAC,IAAMgC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.80d26b7f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Counter_task__12W0p\",\"block\":\"Counter_block__2pF9k\",\"num\":\"Counter_num__1ew64\",\"numred\":\"Counter_numred__3yf6c\",\"nums\":\"Counter_nums__VrJPd\",\"group\":\"Counter_group__3TIyn\",\"button\":\"Counter_button__3gvC4\"};","import React from 'react';\nimport s from \"./Counter.module.css\"\n\n\nclass Res extends React.Component {\n\n    render = () => {\n\n        return (\n            <div className={s.group}>\n\n                <button className={s.button} onClick={this.props.resButton}\n                        disabled={this.props.nameNum===0?\"disabled\":''}\n                        name=\"name\"\n                        href=\"#name\">\n                    Res</button>\n\n            </div>\n        );\n    }\n}\n\n\nexport default Res;\n","import React from 'react';\nimport s from \"./Counter.module.css\"\n\n\nclass Inc extends React.Component {\n\n    render = () => {\n\n        return (\n\n                    <div className={s.group}>\n\n                        <button className={s.button} onClick={this.props.incButton} name=\"name\" href=\"#name\">Inc</button>\n\n                    </div>\n\n        );\n    }\n}\n\n\nexport default Inc;\n","import React from 'react';\nimport s from \"./Counter.module.css\"\nimport Res from \"./Res\";\nimport Inc from \"./Inc\";\n\n\nclass Num extends React.Component {\n\n    render = () => {\n\n        return (\n\n                    <div className={s.nums}>\n                        <span className={this.props.nameNum===5?s.numred:s.num}>Число {this.props.nameNum} </span>\n                    </div>\n\n        );\n    }\n}\n\n\nexport default Num;\n","import React from 'react';\nimport s from \"./Counter.module.css\"\nimport Res from \"./Res\";\nimport Inc from \"./Inc\";\nimport Num from \"./Num\";\n\n\nclass Counter extends React.Component {\n    state = {\n        num: 0\n    }\n    incButton = () => {\n        let num = this.state.num\n        num < 5 && num++\n        this.setState({\n            num: num\n        })\n    }\n    resButton = () => {\n        this.setState({\n            num: 0\n        })\n    }\n\n    render = () => {\n\n        return (\n            <div className={s.task}>\n                <div className=\"title\"><h3>Counter</h3></div>\n                <div className={s.block}>\n                    <Num nameNum={this.state.num}/>\n                    <div className={s.group}>\n                        <Inc incButton={this.incButton} nameNum={this.state.num}/>\n                        <Res resButton={this.resButton} nameNum={this.state.num}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Counter;\n","import React from 'react';\nimport Counter from './Components/Counter';\nimport './App.css';\n\n\nfunction App() {\n  return (\n      <div >\n\n        <Counter />\n\n      </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}